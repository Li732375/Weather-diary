import requests
import json
import matplotlib.pyplot as plt
from datetime import datetime
from multiprocessing import Pool, cpu_count
import os

# 確保 Tables 資料夾存在
os.makedirs("Tables", exist_ok=True)

API_KEY = "YOUR_API_KEY"  # 從 GitHub Secrets 設定
ElementName_list = ["溫度", "體感溫度", "相對濕度", "降雨機率"]

# 獲取天氣資料
def get_weather_data():
    element_names = ",".join(ElementName_list)
    URL = f"https://opendata.cwa.gov.tw/api/v1/rest/datastore/F-D0047-065?Authorization={API_KEY}&ElementName={element_names}&format=JSON&sort=time"

    response = requests.get(URL)
    data = response.json()

    # 儲存 JSON 結果
    with open("3day_weather_forecast_data_KS.json", "w", encoding="utf-8-sig") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    return data

# 繪製每小時單位變化的數據
def get_trend_values(Loc_data, index, date):
    """
    :param data: 載入的 JSON 資料
    :param index: 輸出的圖片檔名序號
    """
    Loc_Table_Names = []

    for element in Loc_data["WeatherElement"]:
        WeatherElement_Name_zh = element["ElementName"]  # 氣象單位繁中名稱
        WeatherElement_Name = ""  # 氣象單位英文名稱  
        # 單位的時段資料
        temperature_times = []
        temperature_values = []

        # 擷取各時段單位數據
        for time_info in element["Time"]:
            dt = datetime.fromisoformat(time_info["DataTime"])
            WeatherElement_Name = list(time_info["ElementValue"][0].keys())[0]  # 取得氣象單位英文名稱
            WeatherElement_value = list(time_info["ElementValue"][0].values())[0]  # 取得氣象單位數值
            
            temperature_times.append(dt)
            temperature_values.append(int(WeatherElement_value))

        # 繪表
        table_address = plot_table(
            Loc_data["LocationName"], 
            WeatherElement_Name_zh, 
            WeatherElement_Name, 
            temperature_times, 
            temperature_values, 
            index, 
            date)
        Loc_Table_Names.append(table_address)
        
    return Loc_data["LocationName"], Loc_Table_Names

# 繪製圖表
def plot_table(loc_name, WeatherElement_Name_zh, WeatherElement_Name, 
               temp_times, temp_values, index, date):
    plt.rcParams['font.family'] = 'Microsoft JhengHei'
    plt.style.use('dark_background')
    fig, ax = plt.subplots(figsize=(14, 6))

    # 限制只顯示序位 0–38 共 39 筆
    temp_times = temp_times[:39]
    temp_values = temp_values[:39]

    # 轉換成 "12\n(三)" 格式
    weekday_map = ["一", "二", "三", "四", "五", "六", "日"]
    time_labels = [f"{dt.strftime('%H')}\n{weekday_map[dt.weekday()]}" for dt in temp_times]

    ax.plot(range(len(temp_times)), temp_values, marker="o", linestyle="-", 
            color="cyan", linewidth=2)

    for x, y in zip(range(len(temp_times)), temp_values):
        ax.text(x, y + 0.3, f"{y:.0f}", ha='center', va='bottom', fontsize=14, 
                color='white')

    ax.set_title(f"{loc_name} 每小時 {WeatherElement_Name_zh} 變化預測", 
                 fontsize=16)

    # 設定 X 軸 tick
    xtick_locs = list(range(0, len(temp_times), 2))
    if 0 not in xtick_locs:
        xtick_locs.insert(0, 0)
    if len(temp_times) - 2 not in xtick_locs:
        xtick_locs.append(len(temp_times) - 2)
    if len(temp_times) - 1 not in xtick_locs:
        xtick_locs.append(len(temp_times) - 1)
    xtick_locs = sorted(set(xtick_locs))

    ax.set_xticks(xtick_locs)
    ax.set_xticklabels([time_labels[i] for i in xtick_locs], fontsize=14)

    ax.set_xlim(-0.8, len(temp_times) - 0.2)

    ax.grid(True, linestyle='--', alpha=0.5)

    # Y 軸設定，避免數值標籤超出
    max_value = max(temp_values)
    min_value = min(temp_values)
    padding = max(1, int((max_value - min_value) * 0.2))
    ax.set_ylim(min_value - padding * 0.8, max_value + padding)

    plt.subplots_adjust(left=0.08, right=0.92, top=0.92, bottom=0.15)

    plt.tight_layout()
    save_link = f"Tables/{date}_{WeatherElement_Name}_{index}.png"
    plt.savefig(save_link, dpi=300)
    plt.close()

    return save_link

# 多進程處理
def worker(args):
    loc, index, date = args
    return get_trend_values(loc, index, date)

if __name__ == "__main__":
    # 取得時間
    date = datetime.now().strftime("%Y-%m-%d")
    output_file = "README.md"

    with open(output_file, "w", encoding="utf-8-sig") as f:
        f.write(f"一個每日自動更新氣象資料的專案，每日上午 7 點更新\n\n")
        f.write(f"# {date} 高雄天氣預報\n\n")
        f.write(f"|區里|每小時預報圖|\n")
        f.write(f"|:-:|:-:|\n")

    data = get_weather_data()
    loc_list = data["records"]["Locations"][0]["Location"]

    args_list = [(loc, idx, date) for idx, loc in enumerate(loc_list)]

    # 多進程(processes)
    '''
    # 可以自行調整 processes 數量

    實際建議上限：不超過 CPU 實體或邏輯核心數量。例如：4 核心 8 線程的 CPU：建議上限 ≈ 8。

    若設太多（如 processes=1000），可能導致：
    - 系統過載（CPU 使用率 100%）；
    - 任務切換過於頻繁，反而變慢；
    - 記憶體不足或進程排程失敗。
    '''
    with Pool(processes=cpu_count()) as pool:
        results = pool.map(worker, args_list)

    for Location_Name, Table_links in results:
        for link in Table_links:
            with open(output_file, "a", encoding="utf-8-sig") as f:
                pic_link = "./" + link
                f.write(f"|{Location_Name}|![該區每小時變化圖]({pic_link})|\n")

    with open(output_file, "a", encoding="utf-8-sig") as f:
        f.write("\n\n## 資料來源\n")
        f.write("中央氣象署開放資料平臺 API：https://opendata.cwa.gov.tw/dist/opendata-swagger.html#/%E9%A0%90%E5%A0%B1/get_v1_rest_datastore_F_D0047_065\n\n")

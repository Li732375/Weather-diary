import requests
import json
import matplotlib.pyplot as plt
import os
from matplotlib import font_manager
from datetime import datetime, timedelta
from multiprocessing import Pool, cpu_count
from zoneinfo import ZoneInfo
from matplotlib.ticker import MaxNLocator


Encoding = "utf-8-sig"
API_KEY = "YOUR_API_KEY"  # 從 GitHub Secrets 設定
ElementName_list = ["溫度", "體感溫度", "相對濕度", "3小時降雨機率"]  # 設定目標氣象因子
Date = datetime.now(ZoneInfo("Asia/Taipei"))  # 設定時區為台北
Date_Now = Date.strftime('%Y-%m-%d')
Weekday_Map = ["一", "二", "三", "四", "五", "六", "日"]
Date_Weekday_zh = Weekday_Map[Date.weekday()]
Output_File = "README.md"  # 設定輸出檔案名稱
Save_Floder_Link = "Tables"  # 設定儲存圖表的資料夾路徑
DAY_BG_COLOR_DARK = "#000000"  # 設定圖表背景顏色 DAY_BG_COLOR_DARK
DAY_BG_COLOR_LIGHT = "#ffffff"  # 設定圖表前景顏色
TABLE_ALPHA = 0.1  # 設定圖表背景透明度


os.makedirs(Save_Floder_Link, exist_ok=True)  # 確保 Tables 資料夾存在

# 清空資料夾
for filename in os.listdir(Save_Floder_Link):
    file_path = os.path.join(Save_Floder_Link, filename)
    if os.path.isfile(file_path):
        os.remove(file_path)


# 獲取天氣資料
def get_weather_data():
    element_names = ",".join(ElementName_list)
    URL = f"https://opendata.cwa.gov.tw/api/v1/rest/datastore/F-D0047-065?Authorization={API_KEY}&ElementName={element_names}&format=JSON&sort=time"

    # 取得資料轉換為 JSON 格式
    response = requests.get(URL)
    data = response.json()
    
    # 儲存 JSON 結果
    data_id = data["records"]["Locations"][0]["Dataid"]
    with open(f"3day_weather_forecast_data_{data_id}.json", "w", encoding="utf-8-sig") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    return data

# Linux/GitHub Actions 專用，設定中文字型
def setup_chinese_font():
    font_path = "/usr/share/fonts/NotoSansCJKtc-Regular.otf"
    prop = font_manager.FontProperties(fname=font_path)
    plt.rcParams['font.family'] = prop.get_name()

# 繪製因子變化數據
def get_trend_values(location_data, Date_Now):
    factory_dict = {}  # 儲存各因子數據

    # 取得該區域所有目標氣象因子數據
    for element in location_data["WeatherElement"]:
        element_name_zh = element["ElementName"]  # 取得氣象因子中文名稱
        element_values = []

        if "DataTime" in element["Time"][0]:
            data_times = []

            for time_info in element["Time"]:
                # 取得時間資訊
                dt = datetime.fromisoformat(time_info["DataTime"])
                data_times.append(dt)

                # 取得氣象因子數值
                element_name_en = list(time_info["ElementValue"][0].keys())[0]  # 取得因子英文名稱
                element_value = list(time_info["ElementValue"][0].values())[0]  # 取得因子單筆數值
                element_values.append(int(element_value))

            title_name = f"{location_data['LocationName']} {element_name_zh} 預測"
            table_name = f"{Date_Now}_{element_name_en}_{location_data['Geocode']}"
            factory_dict[element_name_zh] = (title_name, 
                                             table_name, 
                                             data_times, 
                                             element_values)
                   
        elif "StartTime" in element["Time"][0] and "EndTime" in element["Time"][0]:
            data_start_times = []
            data_end_times = []

            for time_info in element["Time"]:
                # 取得時間資訊
                start_time = datetime.fromisoformat(time_info["StartTime"])
                end_time = datetime.fromisoformat(time_info["EndTime"])
                data_start_times.append(start_time)
                data_end_times.append(end_time)

                # 取得氣象因子數值
                element_name_en = list(time_info["ElementValue"][0].keys())[0]  # 取得因子英文名稱
                element_value = list(time_info["ElementValue"][0].values())[0]  # 取得因子單筆數值
                element_values.append(int(element_value))

            title_name = f"{location_data['LocationName']} {element_name_zh} 預測"
            table_name = f"{Date_Now}_{element_name_en}_{location_data['Geocode']}"
            factory_dict[element_name_zh] = (title_name, 
                                             table_name, 
                                             data_start_times,
                                             data_end_times, 
                                             element_values)
    
    location_table_paths = []  # 儲存該區域所有圖表路徑

    # 繪製單因子折線圖
    table_path = plot_line_chart(
        factory_dict["相對濕度"][0],  # 標題名稱
        factory_dict["相對濕度"][1],  # 表格名稱
        factory_dict["相對濕度"][2][:25],  # 因子時間，單日僅需顯示前 25 筆資料
        factory_dict["相對濕度"][3][:25]  # 因子資料，單日僅需顯示前 25 筆資料
    )
    location_table_paths.append(table_path)  # 儲存單因子折線圖路徑
    
    # 繪製多因子折線圖
    table_name_en = f"{Date_Now}_ATemp&Temp_{location_data['Geocode']}"
    table_path = plot_lines_chart(
        table_name_en,  # 表格名稱
        factory_dict["溫度"][2][:25],  # 因子時間，單日僅需顯示前 25 筆資料
        **{k: factory_dict[k][-1][:25] for k in ["溫度", "體感溫度"]}  # 指定因子，單日僅需顯示前 25 筆資料
    )
    location_table_paths.append(table_path)  # 儲存多因子折線圖路徑

    # 繪製甘特圖
    table_path = plot_gantt_chart(
        factory_dict["3小時降雨機率"][0],  # 標題名稱
        factory_dict["3小時降雨機率"][1],  # 表格名稱
        factory_dict["3小時降雨機率"][2][:8],  # 因子起始時間，單日僅需顯示前 25 筆資料
        factory_dict["3小時降雨機率"][3][:8],  # 因子結束時間，單日僅需顯示前 25 筆資料
        factory_dict["3小時降雨機率"][4][:8]  # 因子資料，單日僅需顯示前 25 筆資料
    )
    location_table_paths.append(table_path)  # 儲存甘特圖路徑

    return location_data["LocationName"], location_table_paths

# 繪製單因子折線圖
def plot_line_chart(title_name, table_name, data_times, data_values):
    # 轉換時間格式為 "時\n星期"
    time_labels = [f"{dt.strftime('%H')}\n{Weekday_Map[dt.weekday()]}" for dt in data_times]

    # 繪圖相關設定
    plt.style.use('dark_background')  # 背景樣式
    fig, ax = plt.subplots(figsize=(12, 6))  # 圖片尺寸比例(寬、高)

    # 設定跨日背景
    prev_day = data_times[0].day
    start_idx = 0
    color_toggle = True  # 控制背景顏色交錯

    for i, dt in enumerate(data_times):
        if dt.day != prev_day or i == len(data_times) - 1:
            end_idx = i if dt.day != prev_day else i + 1
            color = DAY_BG_COLOR_DARK if color_toggle else DAY_BG_COLOR_LIGHT
            ax.axvspan(start_idx, end_idx, color=color, alpha=TABLE_ALPHA)
            prev_day = dt.day
            start_idx = i
            color_toggle = not color_toggle

    # 設定折現線條
    ax.plot(range(len(data_times)), data_values, marker="o", linestyle="-", color="cyan", linewidth=2)

    # 設定點上標記字型
    for x, y in zip(range(len(data_times)), data_values):
        ax.text(x, 
                y + 0.15, 
                f"{y:.0f}", 
                ha='center', 
                va='bottom', 
                fontsize=18, 
                color='white',
                fontweight='bold'
                )

    # 設定圖表標題
    ax.set_title(title_name, fontsize=20)
    
    # 顯示網格
    ax.grid(True, linestyle='--', alpha=0.3)
    
    # 設定 X 軸
    xtick_locs = set(range(0, len(data_times), 3))  # 每 3 筆顯示刻度
    xtick_locs.update([0, len(data_times) - 1])  # 確保顯示第一筆和最後一筆
    xtick_locs = sorted(xtick_locs)
    ax.set_xticks(xtick_locs)
    ax.set_xticklabels([time_labels[i] for i in xtick_locs], fontsize=18)
    ax.set_xlim(-0.8, len(data_times) - 0.2)
    
    # 設定 Y 軸（隱藏）
    max_value = max(data_values)
    min_value = min(data_values)
    padding = max(1, int((max_value - min_value) * 0.2))
    ax.set_ylim(min_value - padding * 0.8, max_value + padding)
    ax.yaxis.set_major_locator(MaxNLocator(integer=True))
    ax.yaxis.set_visible(False)

    # 設定整張圖的內邊距（繪圖區與整體圖像之間的空間）
    plt.subplots_adjust(left=0.02, right=0.98, top=0.90, bottom=0.13)
    
    # 設定儲存路徑
    image_path = f"{Save_Floder_Link}/{table_name}.png"
    plt.savefig(image_path, dpi=100)
    plt.close()

    return image_path

# 繪製甘特圖
def plot_gantt_chart(title_name, table_name, start_times, end_times, data_values):
    # 繪圖相關設定
    plt.style.use('dark_background')
    _, ax = plt.subplots(figsize=(14, 6))

    # 設定跨日背景
    prev_day = start_times[0].day
    start_idx = start_times[0]
    color_toggle = True  # 控制顏色交錯

    for i, dt in enumerate(start_times):
        if dt.day != prev_day or i == len(start_times) - 1:
            end_idx = dt if dt.day != prev_day else end_times[-1]
            color = DAY_BG_COLOR_DARK if color_toggle else DAY_BG_COLOR_LIGHT
            ax.axvspan(start_idx, end_idx, color=color, alpha=TABLE_ALPHA)
            prev_day = dt.day
            start_idx = dt
            color_toggle = not color_toggle

    # 將百分比轉換為 Y 值
    y_values = [v / 100 for v in data_values]

    # 繪製每個區段為橫條
    for i in range(len(start_times)):
        # 繪出區段橫條
        label_color = interpolate_color(y_values[i], (0.75, 0.75, 0.75), (0, 0, 1))  # 漸層顏色插值計算
        ax.barh(y=y_values[i], 
                width=end_times[i] - start_times[i], 
                left=start_times[i],
                height=0.1, 
                align='center', 
                color=label_color
                )

        # 顯示數值文字（百分比）
        callouts_color = interpolate_color(y_values[i], (0.8, 0.8, 0.8), (0.53, 0.81, 0.92))  # 漸層文字顏色插值計算
        ax.text(start_times[i] + (end_times[i] - start_times[i]) / 2,
                y_values[i] + 0.08,
                f"{data_values[i]}", 
                ha='center', 
                va='bottom', 
                color=callouts_color, 
                fontsize=20,
                fontweight='bold'
                )

    # 設定圖表標題
    ax.set_title(title_name, fontsize=20)
    
    # 顯示網格
    ax.grid(True, linestyle='--', alpha=0.3)

    # 設定 X 軸
    xticks = start_times + [end_times[-1]] if end_times[-1] not in start_times else start_times
    tick_labels = [f"{dt.strftime('%H')}\n{Weekday_Map[dt.weekday()]}" for dt in xticks]
    ax.set_xticks(xticks)
    ax.set_xticklabels(tick_labels, rotation=0, fontsize=18)
    margin = timedelta(hours=1)  # 設定 X 軸邊界距離
    ax.set_xlim(min(start_times) - margin, max(end_times) + margin)

    # 設定 Y 軸（隱藏）
    ax.set_yticks([i / 100 for i in range(0, 105, 10)])
    ax.set_yticklabels([f"{i} %" for i in range(0, 105, 10)], fontsize=14)
    ax.set_ylim(0, 1.2)
    ax.yaxis.set_visible(False)

    # 設定整張圖的內邊距（繪圖區與整體圖像之間的空間）
    plt.subplots_adjust(left=0.02, right=0.98, top=0.90, bottom=0.13)
    
    # 設定儲存路徑
    image_path = f"{Save_Floder_Link}/{table_name}.png"
    plt.savefig(image_path, dpi=100)
    plt.close()

    return image_path

# 顏色插值計算
def interpolate_color(value, start_rgb, end_rgb):
    return tuple(start_rgb[j] + value * (end_rgb[j] - start_rgb[j]) for j in range(3))

# 繪製多因子折線圖
def plot_lines_chart(table_name_en, data_times, **data_values_dict):
    # 轉換時間格式為 "時\n星期"
    time_labels = [f"{dt.strftime('%H')}\n{Weekday_Map[dt.weekday()]}" for dt in data_times]

    # 繪圖相關設定
    plt.style.use('dark_background')  # 背景樣式
    _, ax = plt.subplots(figsize=(12, 6))  # 圖片尺寸比例(寬、高)

    # 設定跨日背景
    prev_day = data_times[0].day
    start_idx = 0
    color_toggle = True  # 控制背景顏色交錯

    for i, dt in enumerate(data_times):
        if dt.day != prev_day or i == len(data_times) - 1:
            end_idx = i if dt.day != prev_day else i + 1
            color = DAY_BG_COLOR_DARK if color_toggle else DAY_BG_COLOR_LIGHT
            ax.axvspan(start_idx, end_idx, color=color, alpha=TABLE_ALPHA)
            prev_day = dt.day
            start_idx = i
            color_toggle = not color_toggle

    # 設定折現線條
    for element, value_list in data_values_dict.items():
        ax.plot(range(len(data_times)), 
                value_list,
                marker="o", 
                linestyle="-", 
                linewidth=2,
                label=element
                )

    plt.legend(fontsize=18)  # 顯示圖例

    # 顯示網格
    ax.grid(True, linestyle='--', alpha=0.3)
    
    # 設定 X 軸
    xtick_locs = set(range(0, len(data_times), 3))  # 每 3 筆顯示刻度
    xtick_locs.update([0, len(data_times) - 1])  # 確保顯示第一筆和最後一筆
    xtick_locs = sorted(xtick_locs)
    ax.set_xticks(xtick_locs)
    ax.set_xticklabels([time_labels[i] for i in xtick_locs], fontsize=18)
    ax.set_xlim(-0.8, len(data_times) - 0.2)

    # 設定 Y 軸
    max_value = max(max(v) for v in data_values_dict.values())
    min_value = min(min(v) for v in data_values_dict.values())
    padding = max(1, int((max_value - min_value) * 0.2))
    ax.tick_params(axis='y', labelsize=18)
    ax.set_ylim(min_value - padding * 0.8, max_value + padding)
    ax.yaxis.set_major_locator(MaxNLocator(integer=True))

    # 設定整張圖的內邊距（繪圖區與整體圖像之間的空間）
    plt.subplots_adjust(left=0.04, right=0.96, top=0.92, bottom=0.13)
    
    # 設定儲存路徑
    image_path = f"{Save_Floder_Link}/{table_name_en}.png"
    plt.savefig(image_path, dpi=100)
    plt.close()

    return image_path

if __name__ == "__main__":
    setup_chinese_font()  # Linux/GitHub Actions 專用，設定中文字型

    # 取得氣象資料
    data = get_weather_data()

    # 多進程繪圖
    '''
    # 可以自行調整 processes 數量

    實際建議上限：不超過 CPU 實體或邏輯核心數量。例如：4 核心 8 線程的 CPU：建議上限 ≈ 8。

    若設太多（如 processes=1000），可能導致：
    - 系統過載（CPU 使用率 100%）；
    - 任務切換過於頻繁，反而變慢；
    - 記憶體不足或進程排程失敗。
    '''
    loc_list = data["records"]["Locations"][0]["Location"]
    args_list = [(loc, Date_Now) for loc in loc_list]

    with Pool(processes=cpu_count()) as pool:
        # 繪圖
        results = pool.starmap(get_trend_values, args_list)

    # 寫入 Markdown 檔案
    city_name = data["records"]["Locations"][0]["LocationsName"]
    Output_File_content = [
        f"# {Date_Now} ({Date_Weekday_zh}) {city_name} 天氣預報\n",
    ]

    for District_Name, Table_links in results:
        Output_File_content.append(f"## {District_Name}：\n")

        for link in Table_links:
            Output_File_content.append(f"![該區今明預報圖]({'./' + link})\n")
        
        Output_File_content.append("\n")

    Output_File_content.append(f"\n\n## 資料來源")
    Output_File_content.append(f"\n中央氣象署開放資料平臺 API：https://opendata.cwa.gov.tw/dist/opendata-swagger.html#/%E9%A0%90%E5%A0%B1/get_v1_rest_datastore_F_D0047_065\n\n")

    with open(Output_File, "w", encoding=Encoding) as f:
        f.writelines(Output_File_content)

        now_time = datetime.now(ZoneInfo("Asia/Taipei"))
        f.write(f"\n\n {now_time.strftime('%Y-%m-%d %H:%M:%S')} 更")
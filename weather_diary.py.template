import requests
import json
import matplotlib.pyplot as plt
from matplotlib import font_manager
from datetime import datetime
from multiprocessing import Pool, cpu_count
from zoneinfo import ZoneInfo
import os

# Linux/GitHub Actions 專用，設定中文字型
def setup_chinese_font():
    font_path = "/usr/share/fonts/NotoSansCJKtc-Regular.otf"
    prop = font_manager.FontProperties(fname=font_path)
    plt.rcParams['font.family'] = prop.get_name()

setup_chinese_font()

tables_dir = "Tables"  # 設定儲存圖表的資料夾路徑
os.makedirs(tables_dir, exist_ok=True)  # 確保 Tables 資料夾存在

# 清空資料夾中的所有檔案
for filename in os.listdir(tables_dir):
    file_path = os.path.join(tables_dir, filename)
    if os.path.isfile(file_path):
        os.remove(file_path)


Encoding = "utf-8-sig"
API_KEY = "YOUR_API_KEY"  # 從 GitHub Secrets 設定
ElementName_list = ["溫度", "體感溫度", "相對濕度"]
Date = datetime.now(ZoneInfo("Asia/Taipei"))  # 設定時區為台北
Weekday_Map = ["一", "二", "三", "四", "五", "六", "日"]
Output_File = "README.md"  # 設定輸出檔案名稱


# 獲取天氣資料
def get_weather_data():
    element_names = ",".join(ElementName_list)
    URL = f"https://opendata.cwa.gov.tw/api/v1/rest/datastore/F-D0047-065?Authorization={API_KEY}&ElementName={element_names}&format=JSON&sort=time"

    response = requests.get(URL)
    data = response.json()

    with open("3day_weather_forecast_data_KS.json", "w", encoding=Encoding) as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

    return data

# 繪製每小時單位變化的數據
def get_trend_values(location_data, index, Date):
    location_table_paths = []

    for element in location_data["WeatherElement"]:
        element_name_zh = element["ElementName"]
        element_name_en = ""  
        data_times = []
        element_values = []

        for time_info in element["Time"]:
            dt = datetime.fromisoformat(time_info["DataTime"])
            element_name_en = list(time_info["ElementValue"][0].keys())[0]
            element_value = list(time_info["ElementValue"][0].values())[0]

            data_times.append(dt)
            element_values.append(int(element_value))

        table_path = plot_table(
            location_data["LocationName"],
            element_name_zh,
            element_name_en,
            data_times,
            element_values,
            index,
            Date
        )
        location_table_paths.append(table_path)

    return location_data["LocationName"], location_table_paths

# 繪表
def plot_table(location_name, element_name_zh, element_name_en, 
               data_times, data_values, index, Date):
    
    plt.style.use('dark_background')
    fig, ax = plt.subplots(figsize=(12, 6))

    # 限制只顯示最多 39 筆資料
    data_times = data_times[:39]
    data_values = data_values[:39]

    # 轉換時間格式為 "12\n(三)"
    time_labels = [f"{dt.strftime('%H')}\n{Weekday_Map[dt.weekday()]}" for dt in data_times]

    ax.plot(range(len(data_times)), data_values, marker="o", linestyle="-", color="cyan", linewidth=2)

    for x, y in zip(range(len(data_times)), data_values):
        ax.text(x, y + 0.3, f"{y:.0f}", ha='center', va='bottom', fontsize=14, color='white')

    ax.set_title(f"{location_name} 每小時 {element_name_zh} 變化預測", fontsize=16)

    # 設定 X 軸 tick
    xtick_locs = set(range(0, len(data_times), 3))
    xtick_locs.update([0, len(data_times) - 2, len(data_times) - 1])
    xtick_locs = sorted(xtick_locs)
    ax.set_xticks(xtick_locs)
    ax.set_xticklabels([time_labels[i] for i in xtick_locs], fontsize=14)

    ax.set_xlim(-0.8, len(data_times) - 0.2)
    ax.grid(True, linestyle='--', alpha=0.5)

    max_value = max(data_values)
    min_value = min(data_values)
    padding = max(1, int((max_value - min_value) * 0.2))
    ax.set_ylim(min_value - padding * 0.8, max_value + padding)

    plt.subplots_adjust(left=0.08, right=0.92, top=0.92, bottom=0.15)
    plt.tight_layout()

    output_dir = "Tables"
    image_path = f"{output_dir}/{Date}_{element_name_en}_{index}.png"
    plt.savefig(image_path, dpi=300)
    plt.close()

    return image_path

# 多進程處理
def worker(args):
    loc, index, Date = args
    return get_trend_values(loc, index, Date)

if __name__ == "__main__":
    with open(Output_File, "w", encoding=Encoding) as f:
        f.write(f"一個每日自動更新氣象資料的專案，每日上午 7 點更新\n\n")
        f.write(f"# {Date.strftime('%Y-%m-%d')} ({Weekday_Map[Date.strftime('%A')]}) 高雄天氣預報\n")

    data = get_weather_data()
    loc_list = data["records"]["Locations"][0]["Location"]
    args_list = [(loc, idx, Date) for idx, loc in enumerate(loc_list)]

    # 多進程
    '''
    # 可以自行調整 processes 數量

    實際建議上限：不超過 CPU 實體或邏輯核心數量。例如：4 核心 8 線程的 CPU：建議上限 ≈ 8。

    若設太多（如 processes=1000），可能導致：
    - 系統過載（CPU 使用率 100%）；
    - 任務切換過於頻繁，反而變慢；
    - 記憶體不足或進程排程失敗。
    '''
    with Pool(processes=cpu_count()) as pool:
        results = pool.map(worker, args_list)

    for District_Name, Table_links in results:
        with open(Output_File, "a", encoding=Encoding) as f:
            f.write(f"## {District_Name}：\n")

            for link in Table_links:
                f.write(f"![該區今明每小時變化圖]({'./' + link})\n")
            
            f.write("\n")

    with open(Output_File, "a", encoding=Encoding) as f:
        f.write(f"\n\n## 資料來源\n")
        f.write(f"中央氣象署開放資料平臺 API：https://opendata.cwa.gov.tw/dist/opendata-swagger.html#/%E9%A0%90%E5%A0%B1/get_v1_rest_datastore_F_D0047_065\n\n")
